{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-f8cdc2ae-0ebc-4c3c-9863-f0b1a5cecb6e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability is a potential Cross-Site Scripting (XSS) vulnerability detected in JavaScript template string through unescaped variable interpolation. It is found in the `handlebars` module, which is an extension to the Mustache templating language. The vulnerability allows for Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to upgrade the `handlebars` module to version 4.7.7 or higher. This version contains a fix for the vulnerability.\n\n## Source Code Fix Recommendation\n\nThe source code fix is to upgrade the `handlebars` module to version 4.7.7 or higher. This can be done by updating the version number in your `package.json` file and running `npm install`.\n\n```json\n\"dependencies\": {\n  \"handlebars\": \"^4.7.7\"\n}\n```\n\nThen run:\n\n```bash\nnpm install\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- `handlebars`\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8)"
              },
              "properties": {
                "tags": [
                  "resources.rules.no-interpolation-js-template-string"
                ]
              }
            },
            {
              "id": "glog-8385d3ed-7901-4665-9db8-260dc201de5b",
              "help": {
                "text": "",
                "markdown": "## Description\n\nPotential Root User Exploitation in Docker Container Programs is a security vulnerability that arises when Docker containers are run as root. This is a common default setting in many Docker configurations. If an attacker manages to break out of the container, they could gain root access to the host system, leading to a serious security breach.\n\nIn the context of JavaScript programming, this vulnerability can occur when Node.js applications are containerized using Docker. The specific vulnerability sink in this case is the ENTRYPOINT directive in the Dockerfile, which starts the application using npm.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to follow the principle of least privilege. This means running your Docker containers as a non-root user. This can be achieved by creating a new user in your Dockerfile and switching to this user before executing any commands.\n\n## Source Code Fix Recommendation\n\nHere is a sample Dockerfile that demonstrates this:\n\n```Dockerfile\nFROM node:14\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN adduser -D myuser\nUSER myuser\nENTRYPOINT [\"npm\", \"start\"]\n```\n\nIn this Dockerfile, a new user named 'myuser' is created and then used to run the application. This way, even if an attacker manages to break out of the container, they will only have the privileges of 'myuser', not root.\n\n## Library Dependencies\n\nThe code example provided does not have any specific library dependencies. It is a Dockerfile directive and not a JavaScript code. However, to execute properly, it requires Docker to be installed on the host machine and Node.js application to be available in the working directory.\n\n## References\n\n- [CWE-250: Execution with Unnecessary Privileges](https://cwe.mitre.org/data/definitions/250.html)"
              },
              "properties": {
                "tags": [
                  "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint"
                ]
              }
            },
            {
              "id": "glog-2ad29628-c86f-42b2-95a9-564c4e1b5286",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Generic Secret Vulnerability\" is a common security issue in JavaScript programming where sensitive information such as API keys, passwords, or tokens are hard-coded into the source code. This is a bad practice as it exposes these secrets to anyone who has access to the source code, making the application vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid hard-coding secrets into your source code. Instead, use environment variables to store sensitive information. Environment variables are a type of dynamic-named value that can affect the way running processes will behave on a computer. They are part of the environment in which a process runs.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code:\n\n```javascript\nvar token = process.env.SECRET_TOKEN;\n```\n\nIn this code, `SECRET_TOKEN` is an environment variable that stores the secret token. You can set the environment variable in your server or local development environment.\n\n## Library Dependencies\n\nThe provided code does not require any library dependencies to execute properly.\n\n## OWASP and CWE Resources\n\n- [OWASP Top Ten 2017: A2 - Broken Authentication](https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication)\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-generic-secret"
                ]
              }
            },
            {
              "id": "glog-b2bf1aac-964b-4fe6-8d07-afa4c61966a0",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Detected Generic Secret Vulnerability\" in JavaScript refers to a Remote Memory Exposure vulnerability in the `bl` (BufferList) library. This vulnerability can lead to the corruption of BufferList state if user input ends up in the `consume()` argument and can become negative. This can trick the BufferList into exposing uninitialized memory via regular `.slice()` calls.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to sanitize and validate user inputs to ensure they cannot become negative. Additionally, it is crucial to keep your dependencies up-to-date. In this case, the `bl` library should be updated to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n\n## Source Code Fix Recommendation\n\nUpgrade the `bl` library to a non-vulnerable version. This can be done by updating the `package.json` file:\n\n```json\n\"dependencies\": {\n  \"bl\": \">=2.2.1\"\n}\n```\n\nThen run `npm install` to install the updated package.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `bl`\n- `crypto`\n\n## References\n\n- [OWASP Top 10-2017 A3-Sensitive Data Exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)\n- [CWE-200: Information Exposure](https://cwe.mitre.org/data/definitions/200.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-generic-secret"
                ]
              }
            },
            {
              "id": "glog-9a8440a2-f7c2-42c5-9b0f-71bf1ac6fbbf",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographic secrets, such as password, tokens, or any other secret information. This is because `Math.random()` is not cryptographically secure, meaning that it can produce predictable values and could be vulnerable to attacks.\n\nThe `crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographic secrets. Although it is more secure than `Math.random()`, it is still not cryptographically secure. It uses a pseudorandom number generator, which can also produce predictable values.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure random number generator. In Node.js, you can use the `crypto.randomBytes()` function, which generates cryptographically strong pseudo-random data. The byte array can be converted to a hexadecimal string for use as a password or token.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet user = {\n  name: 'admin',\n  password: crypto.randomBytes(16).toString('hex'),\n  canDelete: true\n};\n```\n\nThis code uses the `crypto.randomBytes()` function to generate a 16-byte password, which is then converted to a hexadecimal string.\n\n## Library Dependencies\n\nThe fixed code requires the `crypto` module, which is a built-in module in Node.js, so no additional dependencies are needed.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-11051285-3409-4180-b3c9-472def0d72f4",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code snippet, the application is logging a message to the console that includes a user-controlled variable (`username`). If this variable is not properly sanitized, it could lead to an XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate XSS vulnerabilities, it is recommended to:\n\n- Use frameworks that automatically escape XSS by design, such as Ruby on Rails, React JS, etc.\n- Escape untrusted HTTP request data based on the context in the HTML output (body, attribute, JavaScript, CSS, or URL) will resolve Reflected and Stored XSS vulnerabilities.\n- Apply context-sensitive encoding when modifying the browser document on the client side acts against DOM XSS.\n\n## Source Code Fix Recommendation\n\nIn this specific case, as the data is being logged to the console and not being rendered in the browser, there is no direct XSS vulnerability. However, if the `username` variable were to be used in a context where it is rendered in the browser, it should be properly escaped. Here is an example of how to do this:\n\n```javascript\nlet username = userInput;\nusername = username.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;');\nconsole.log(`User logged in: ${username}`);\n```\n\n## Library Dependencies\n\nThe provided code snippet does not require any library dependencies to execute properly.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-2a804b11-3160-4630-a2cc-2f8c5474e8d9",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\" vulnerability refers to a situation where an attacker can manipulate user-input controlled parameters to inject malicious scripts. In the provided code snippet, the `replace()` function is used to remove newline characters from the `time` variable. If the `time` variable is controlled by user input, it could be manipulated to include malicious scripts, leading to a Cross-Site Scripting (XSS) attack.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate, sanitize, and escape user inputs. Never trust user inputs blindly. Use secure functions for handling user inputs and avoid using functions that can execute code dynamically.\n\n## Source Code Fix Recommendation\n\n```javascript\n// Assuming you have a function to sanitize input\nfunction sanitizeInput(input) {\n    var element = document.createElement('div');\n    element.innerText = input;\n    return element.innerHTML;\n}\n\n// Use the function to sanitize user input\ntime = sanitizeInput(time);\ntime = time.replace(/\\n$/, '');\n```\n\nIn the above code, the `sanitizeInput()` function is used to sanitize the `time` variable before using it in the `replace()` function. This will prevent any malicious scripts from being executed.\n\n## Library Dependencies\n\nThe provided code snippet does not require any library dependencies to execute properly.\n\n## OWASP Resources\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-502a4648-db11-4fb1-8668-8c8b589b75f7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-91855465-9de0-4ad9-95ea-aab53ae7e588",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"JavaScript Sink Vulnerability Detected through User-Input Control Parameter\" vulnerability refers to a situation where an application does not properly validate or sanitize user input before using it in a sensitive operation. In this case, the sink is the `res.status(302).send(todo.content.toString('base64'));` line of code. This line of code is vulnerable because it directly uses user input (`todo.content`) without any form of validation or sanitization. This can lead to various types of attacks such as Cross-Site Scripting (XSS), SQL Injection, and Command Injection attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate and sanitize user input before using it in any sensitive operation. Validation ensures that the input meets certain criteria (e.g., length, format, type, etc.), while sanitization removes or escapes any potentially harmful characters or sequences from the input.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix for the vulnerability:\n\n```javascript\nvar sanitize = require('sanitize-html');\n\n// ...\n\nvar content = sanitize(todo.content);\nres.status(302).send(content.toString('base64'));\n```\n\nIn this fix, the `sanitize-html` library is used to sanitize the user input before using it.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `express`: A web application framework for Node.js.\n- `sanitize-html`: A library for sanitizing HTML input.\n\n## OWASP and CWE Resources\n\n- [OWASP: Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n- [OWASP: Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-b22136e8-b516-4324-b5e5-7458b6cd5ab5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-4951c933-e846-494d-8555-c99b1ef35757",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-6aac7c55-cb37-4f49-a6fd-d40b67be8605",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-cb30a336-872d-425a-ba8d-3b22dda32c5a",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn JavaScript, using `res.send()` to directly write user input to the response object can lead to XSS vulnerabilities. This is because `res.send()` does not perform any HTML escaping, so any HTML or JavaScript code included in the user input will be executed by the browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use `resp.render()` instead of `res.send()`. The `resp.render()` function performs HTML escaping, which ensures that any HTML or JavaScript code in the user input is treated as plain text and not executed by the browser.\n\n## Source Code Fix Recommendation\n\nInstead of:\n\n```javascript\nres.send(messages);\n```\n\nUse:\n\n```javascript\nresp.render('template', { messages: messages });\n```\n\nIn this example, 'template' is the name of the view file to be rendered, and `{ messages: messages }` is the data to be passed to the view.\n\n## Library Dependencies\n\nThe code example requires the Express.js library.\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Node.js Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-9b09ce93-c63c-4439-ae97-3e1fdeef90ff",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application uses untrusted data in the EJS template without proper validation or escaping. This allows an attacker to inject malicious scripts into the web page, which will be executed in the browser of any user viewing that page. This is a type of Cross-Site Scripting (XSS) vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data is placed into. In EJS, the `<%- %>` tags are used to output unescaped, raw data, while `<%= %>` tags are used to output HTML escaped data.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code:\n\n```html\n<input type=\"hidden\" name=\"redirectPage\" value=\"<%= redirectPage %>\" />\n```\n\nIn this version, the `<%= %>` tags are used instead of `<%- %>`, which means that the `redirectPage` data will be HTML escaped.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Express.js\n- EJS\n\n## OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-1068667c-1347-4262-95c1-4c421361f81d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe EJS Template XSS Vulnerability Detected Due to Unescaped External Data is a security vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. Also, use secure coding practices such as input validation, output encoding, and appropriate server-side controls.\n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, the `todo.content` is being passed to the `marked` function without being properly escaped. This can be fixed by using the EJS escape function `<%-` instead of `<%=`. The fixed code should look like this:\n\n```javascript\n<a class=\"update-link\" href=\"/edit/<%- todo._id %>\" title=\"Update this todo item\"><%- marked(todo.content) %></a>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS: A templating engine for JavaScript.\n- Marked: A markdown parser and compiler built for speed.\n\n## References\n\n- [OWASP Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-53b684e8-46c7-4e7c-9235-af27c746de2c",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not cryptographically secure. It uses a pseudorandom number generator with a relatively small period, which means that it can be predictable and repeatable, especially if an attacker can guess or determine the seed value. This can lead to a variety of security vulnerabilities, especially in cryptographic contexts where the quality of randomness is crucial.\n\nThe `crypto.pseudoRandomBytes()` function in Node.js is also not cryptographically secure. It generates pseudorandom bytes, but it does not use a cryptographically secure pseudorandom number generator (CSPRNG). This means that the output can be predictable and repeatable, which can lead to security vulnerabilities.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure pseudorandom number generator (CSPRNG) instead of `Math.random()` or `crypto.pseudoRandomBytes()`. In Node.js, you can use the `crypto.randomBytes()` function, which generates cryptographically secure random bytes.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```javascript\nconst crypto = require('crypto');\n\nfunction secureRandom(min, max) {\n    var range = max - min;\n    var randomBuffer = crypto.randomBytes(4);\n    var randomValue = randomBuffer.readUInt32BE(0, true);\n    return min + (randomValue / 0xFFFFFFFF) * range;\n}\n\nreturn Math.floor(secureRandom(min, max));\n```\n\n## Library Dependencies\n\nThis code requires the `crypto` module, which is built into Node.js.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-232194ae-27c8-47c7-8f46-214b5266405d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-19569d05-3323-470e-8ec0-639433e12d20",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application uses untrusted data in the EJS template without proper validation or escaping. This allows an attacker to inject malicious scripts into the web page, which will be executed in the browser of any user viewing that page. This is a type of Cross-Site Scripting (XSS) vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data based on the context in which the data is used. In the case of EJS templates, use `<%= %>` instead of `<%- %>` to automatically escape the output.\n\n## Source Code Fix Recommendation\n\nReplace `<%- body %>` with `<%= body %>`. This will ensure that any HTML special characters in `body` are properly escaped.\n\n```javascript\n<%= body %>\n```\n\n## Library Dependencies\n\nThe code example requires the `ejs` library.\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-f8cdc2ae-0ebc-4c3c-9863-f0b1a5cecb6e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability Detected in JavaScript Template String through Unescaped Variable Interpolation\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "example111.json",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 746,
                  "endLine": 260,
                  "endColumn": 1368,
                  "snippet": {
                    "text": "                \"markdown\": \"* Package Manager: npm\\n* Vulnerable module: handlebars\\n* Introduced through: goof@1.0.1, tap@11.1.5 and others\\n### Detailed paths\\n* _Introduced through_: goof@1.0.1 › tap@11.1.5 › nyc@11.9.0 › istanbul-reports@1.4.0 › handlebars@4.0.11\\n# Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\\r\\n\\r\\n## POC\\r\\n```\\r\\n<script src=\\\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\\\"></script> \\r\\n<script> \\r\\n// compile the template \\r\\nvar s = ` \\r\\n{{#with (__lookupGetter__ \\\"__proto__\\\")}} \\r\\n{{#with (./constructor.getOwnPropertyDescriptor . \\\"valueOf\\\")}} \\r\\n{{#with ../constructor.prototype}} \\r\\n{{../../constructor.defineProperty . \\\"hasOwnProperty\\\" ..}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{#with \\\"constructor\\\"}} \\r\\n{{#with split}} \\r\\n{{pop (push \\\"alert('Vulnerable Handlebars JS when compiling in strict mode');\\\")}} \\r\\n{{#with .}} \\r\\n{{#with (concat (lookup join (slice 0 1)))}} \\r\\n{{#each (slice 2 3)}} \\r\\n{{#with (apply 0 ../..)}} \\r\\n{{.}} \\r\\n{{/with}} \\r\\n{{/each}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n`;\\r\\nvar template = Handlebars.compile(s, { \\r\\nstrict: true \\r\\n}); \\r\\n// execute the compiled template and print the output to the console console.log(template({})); \\r\\n</script>\\r\\n```\\n# Remediation\\nUpgrade `handlebars` to version 4.7.7 or higher.\\n# References\\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8)\\n\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "86e43c626563023587a8cfefdb6e45d62abbfea33f2549b5ddb8f808ce191be315bc2438f9da237ee35216f3ccbc969dcb8d5a40645621da14cc295322320f16_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-8385d3ed-7901-4665-9db8-260dc201de5b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Potential Root User Exploitation in Docker Container Programs"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 28,
                  "snippet": {
                    "text": "ENTRYPOINT [\"npm\", \"start\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03e569d33136470730d1bb7c2aadebfd578f57db0251b5c961e4bb6f74a7b06915605c7bb0f8c4c06c623b529e84fd4a3b1b42ab4ae1d765428edc6569b48a42_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-2ad29628-c86f-42b2-95a9-564c4e1b5286",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Generic Secret Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 14,
                  "endLine": 83,
                  "endColumn": 67,
                  "snippet": {
                    "text": "var token = 'SECRET_TOKEN_f8ed84e8f41e4146403dd4a6bbcea5e418d23a9';"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "39c09400d1093cda9964160c303d84700d160c268ad56944ecdfed90526b847f154d5b66f58dc96a7fef5a0a2313f74ca7188929e704c5f30865c49bdf86cffa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b2bf1aac-964b-4fe6-8d07-afa4c61966a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Generic Secret Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "example111.json",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 717,
                  "endLine": 80,
                  "endColumn": 1529,
                  "snippet": {
                    "text": "                \"markdown\": \"* Package Manager: npm\\n* Vulnerable module: bl\\n* Introduced through: goof@1.0.1, mongodb@3.5.9 and others\\n### Detailed paths\\n* _Introduced through_: goof@1.0.1 › mongodb@3.5.9 › bl@2.2.0\\n# Overview\\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\\n\\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\\r\\n\\r\\n## PoC by chalker\\r\\n```\\r\\nconst { BufferList } = require('bl')\\r\\nconst secret = require('crypto').randomBytes(256)\\r\\nfor (let i = 0; i < 1e6; i++) {\\r\\n  const clone = Buffer.from(secret)\\r\\n  const bl = new BufferList()\\r\\n  bl.append(Buffer.from('a'))\\r\\n  bl.consume(-1024)\\r\\n  const buf = bl.slice(1)\\r\\n  if (buf.indexOf(clone) !== -1) {\\r\\n    console.error(`Match (at ${i})`, buf)\\r\\n  }\\r\\n}\\r\\n```\\n# Remediation\\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\\n# References\\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\\n- [HackerOne Report](https://hackerone.com/reports/966347)\\n\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fbf5ed662d722ce658a51e2c115c8a58bb78d67730df6b1f3ddf6d55b89f4ea8304c47c1ad9ad9be5cb95e2d20fc24a47fbf621c548c0d04069fe2e75a628a34_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9a8440a2-f7c2-42c5-9b0f-71bf1ac6fbbf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 30,
                  "endLine": 317,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  { name: 'admin', password: Math.random().toString(32), canDelete: true },"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bae4b8f215bac7edb4be16b2fd17c9727b7af5dfd12e750273bec10c6cb5b1785492912422a96f5e52a9d2efab752852a10910e96abdb3fdbf32a6a05c650125_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-11051285-3409-4180-b3c9-472def0d72f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS Vulnerability from User-Controlled Data in HTML String"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "endLine": 58,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  console.log(`User logged in: ${username}`)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ce261fceaa65dd184dd6141671983f39db70315772ddcd6506c5cb038ee93be63c2f20e1286ebe30f572f15210077db10f5ba765b3ea26050ffd22d1951a870_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-2a804b11-3160-4630-a2cc-2f8c5474e8d9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 12,
                  "endLine": 137,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    time = time.replace(/\\n$/, '');"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "837fb74ab0ccb7ff61fe658da279f5e416474622759c679ac4a63c038fed16ec920117bc53c0f493271333a81af98632f636baab227e4e3a87c04b55fc1b581e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-502a4648-db11-4fb1-8668-8c8b589b75f7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 5,
                  "endLine": 354,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    res.send({ ok: true });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5e69ac40a767d7ede9b9ae43ebc95b6e7c88a31098d08aa659aaa5bda1dec7213799a5f89cbce04d5bc7950d7d39af6329e811e7ffb5bb5f910202a6c53dbd3c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-91855465-9de0-4ad9-95ea-aab53ae7e588",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"JavaScript Sink Vulnerability Detected through User-Input Control Parameter\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 5,
                  "endLine": 184,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    res.status(302).send(todo.content.toString('base64'));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d3dca3f47eac80b6526faf3fac43866a2c2eecd1a4fd0bc6122aee52bb940dce0056db7b4801cc68a6d251dd12142a134d66c7628f66b87b4551bccaf23da9a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b22136e8-b516-4324-b5e5-7458b6cd5ab5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 5,
                  "endLine": 365,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    res.send({ ok: true });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2ace50695f13f0d435116b57b1162746bf090c77eaab09479ef44717f73d9c0368e57cefa4a24e90e29fa663d1bd21d43a9af0d9a0bc1fb37d23021d2b6972a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-4951c933-e846-494d-8555-c99b1ef35757",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 7,
                  "endLine": 338,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      res.status(403).send({ ok: false, error: 'Access denied' });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1ea3444a97c0c0eb7ac562ca4eebde88b0822a50ee3a5b0b15807c6318c42fefc5d11c6346e8d5cfac8327683163253d9fecdca26dab931361fc453e9a374a22_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-6aac7c55-cb37-4f49-a6fd-d40b67be8605",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 7,
                  "endLine": 360,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      res.status(403).send({ ok: false, error: 'Access denied' });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "66b659d9ac40b2ece693c9e54593653c1a21c01ee327e2693eb3dfb63b97e5fd670df83e442fd8e68cfc90e9e91d86b9ceca6b0d87d810d614dd92a15dd9cef6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-cb30a336-872d-425a-ba8d-3b22dda32c5a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Direct Writing to Response Object May Lead to XSS Vulnerability; Use 'resp.render()' for Safe HTML Escaping"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 5,
                  "endLine": 332,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    res.send(messages);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f45503b614fbba9152325bf23b4188c8a6a894398ef958fec36aaf015b1fc887f1ddfaa8582bf72fb294ac55a949a5fbb75e8f5c3bbc8496d6a6dbbc272495d2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9b09ce93-c63c-4439-ae97-3e1fdeef90ff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/admin.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 55,
                  "endLine": 17,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      <input type=\"hidden\" name=\"redirectPage\" value=\"<%- redirectPage %>\" />"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "38efd22c5a07ae3951ca032dc993871c3872d2eccfee0f26f4241b9152a9c2b21c76b6c444391ea08d387c35e446494cdd150332936b8b78db8936a33b1c3826_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-1068667c-1347-4262-95c1-4c421361f81d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/index.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 87,
                  "endLine": 20,
                  "endColumn": 126,
                  "snippet": {
                    "text": "    <a class=\"update-link\" href=\"/edit/<%= todo._id %>\" title=\"Update this todo item\"><%- marked(new String(todo.content)) %></a>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8a22f8481d9683762baa2e42e9fbf984ce5becef7857927b037b7465defcc1d90085c7a666ebdd3c492cd52546948ffca0d78b067a9f8cc98747e6c8a6af6127_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-53b684e8-46c7-4e7c-9235-af27c746de2c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Cryptographic Vulnerability in crypto.pseudoRandomBytes()/Math.random() Random Number Generator\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 24,
                  "endLine": 4,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    return Math.floor( Math.random() * ( max - min + 1 )) + min;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3075809ce239b87b7ee404eadc9f043863190bcc8453a8dc2054ba8d52579161c749cb0eba39bb324299c8c39278a9198a868e8855a3a10b80b81d4bedc4a903_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-232194ae-27c8-47c7-8f46-214b5266405d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/layout.hbs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      {{{body}}}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ff9b5d5756fb4ffaba65b9392ccda1096d1fecc4bb09f26f13aa05f5472c9149847b33f9592f298dca8553c551cfae15600fbee7e34db6eefe8011d4e5fe220_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-19569d05-3323-470e-8ec0-639433e12d20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/layout.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      <%- body %>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a95e1ffc66e76fa5739bc59d0482027cda57a46d0bf7bfee58d0f5d3d407a68805aa4f828240ec732e343c4bfea98de3ea74e76e35ceaf8846a2908d7d9d8bb0_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}