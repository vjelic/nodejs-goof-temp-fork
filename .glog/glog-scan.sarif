{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-bff0f977-e3aa-4843-b756-54b9b7499205",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Generic Secret Vulnerability\" is a common security issue in JavaScript programming where sensitive information such as API keys, passwords, or tokens are hard-coded directly into the source code. This is a bad practice as it exposes these secrets to anyone who has access to the code, making it easier for malicious actors to exploit them.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid hard-coding secrets directly into your source code. Instead, use environment variables or a secure configuration management system to store and manage your secrets. This way, the secrets are not exposed in the code and can be easily changed if needed.\n\n## Source Code Fix Recommendation\n\nInstead of hard-coding the token directly into the code, you can use an environment variable to store it. Here's how you can do it:\n\n```javascript\nvar token = process.env.SECRET_TOKEN;\n```\n\nThen, you can set the `SECRET_TOKEN` environment variable in your server or local development environment.\n\n## Library Dependencies\n\nThe code example does not require any library dependencies to execute properly.\n\n## OWASP Resources\n\n- [OWASP Top 10 2017: A2-Broken Authentication](https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication)\n- [OWASP Cheat Sheet: Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-generic-secret"
                ]
              }
            },
            {
              "id": "glog-a2af60da-7a80-410e-8ace-b121ace6f7e7",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `bl` library in JavaScript, which is used to collect buffers and access them with a standard readable buffer interface, has a vulnerability that can lead to Remote Memory Exposure. This vulnerability is present in versions of the package prior to 2.2.1, 3.0.1, 4.0.3, 1.2.3. If user input is passed to the `consume()` function and can become negative, the BufferList state can be corrupted, which can lead to the exposure of uninitialized memory through regular `.slice()` calls.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to upgrade the `bl` library to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher. It is also important to validate and sanitize all user inputs before using them in your application to prevent such vulnerabilities.\n\n## Source Code Fix Recommendation\n\nUpgrade your `bl` library to a non-vulnerable version by updating your `package.json` file:\n\n```json\n\"dependencies\": {\n  \"bl\": \">=2.2.1\"\n}\n```\n\nThen run `npm install` to install the updated package.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `bl`\n- `crypto`\n\n## References\n\n- [OWASP Top 10-2017 A3-Sensitive Data Exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)\n- [CWE-200: Information Exposure](https://cwe.mitre.org/data/definitions/200.html)\n\nPlease note that the links provided are valid and active at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-generic-secret"
                ]
              }
            },
            {
              "id": "glog-86571f38-63ff-44ba-968c-6c2c1abab408",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability is related to the use of JavaScript template string interpolation in the Handlebars library. Affected versions of this package are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source. This is a type of Cross-Site Scripting (XSS) vulnerability, where an attacker can inject malicious scripts into web pages viewed by other users.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to upgrade the `handlebars` library to version 4.7.7 or higher. This version includes a fix for the vulnerability.\n\n## Source Code Fix Recommendation\n\nThe source code fix is to upgrade the `handlebars` library to a non-vulnerable version. This can be done by updating the version in your `package.json` file and running `npm install`:\n\n```json\n\"dependencies\": {\n  \"handlebars\": \"^4.7.7\"\n}\n```\n\nThen run:\n\n```bash\nnpm install\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- `handlebars`\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8)"
              },
              "properties": {
                "tags": [
                  "resources.rules.no-interpolation-js-template-string"
                ]
              }
            },
            {
              "id": "glog-4d250cf6-a086-4860-8ca9-9ff7584442d2",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code snippet, the application is logging a message to the console that includes a username. If the username is user-controlled and not properly sanitized, it could potentially lead to an XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always escape untrusted HTTP request data based on the context in the HTML output (HTML body, HTML attribute, JavaScript, CSS, or URL) that the data lands. \n\n## Source Code Fix Recommendation\n\nIn this specific case, since the data is being output to the console and not to the HTML, the risk of XSS is low. However, it's still a good practice to sanitize any user-controlled data. Here's how you can do it:\n\n```javascript\nconsole.log(`User logged in: ${escape(username)}`)\n```\n\nIn this case, the `escape` function will ensure that any potentially harmful characters in the username are properly escaped.\n\n## Library Dependencies\n\nThe provided code snippet does not require any additional library dependencies to execute properly.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-aab1adac-584c-48da-89f0-f02bd77f802e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nPotential Root User Exploitation in Docker Container is a security vulnerability that arises when a Docker container is run as a root user. This is a common default setting in many Docker containers. If an attacker manages to break out from the container, they could gain root access to the host system, leading to a serious security breach.\n\nIn the context of JavaScript programming, this vulnerability can occur when a Node.js application is run inside a Docker container with root user privileges. The specific vulnerability sink in this case is the ENTRYPOINT directive in the Dockerfile, which starts the Node.js application using npm.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to run the Docker container as a non-root user. This can be achieved by creating a new user in the Dockerfile and switching to this user before the application is started.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the Dockerfile:\n\n```Dockerfile\nFROM node:14\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN adduser -D myuser\nUSER myuser\nENTRYPOINT [\"npm\", \"start\"]\n```\n\nIn this Dockerfile, a new user named 'myuser' is created and the USER directive is used to switch to this user. The Node.js application is then started as this non-root user.\n\n## Library Dependencies\n\nThe code example does not require any specific library dependencies to execute properly. It only requires Node.js and npm, which are included in the base Docker image (node:14).\n\n## References\n\n- [CWE-250: Execution with Unnecessary Privileges](https://cwe.mitre.org/data/definitions/250.html)"
              },
              "properties": {
                "tags": [
                  "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint"
                ]
              }
            },
            {
              "id": "glog-265be8fa-509b-47ad-9c7d-93bd1dd0e60a",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for cryptographic purposes. It generates pseudo-random numbers using a seed that can be easily predicted, making it vulnerable to attacks. This vulnerability is known as \"Cryptographic Weakness in crypto.pseudoRandomBytes()/Math.random() Random Number Generator\".\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a secure random number generator that is suitable for cryptographic purposes. In Node.js, you can use the `crypto.randomBytes()` function, which generates cryptographically strong pseudo-random data.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet user = {\n  name: 'admin',\n  password: crypto.randomBytes(16).toString('hex'),\n  canDelete: true\n};\n```\n\nThis code uses the `crypto.randomBytes()` function to generate a secure random password. The `16` argument specifies the number of bytes to generate, and the `'hex'` argument specifies that the output should be a hexadecimal string.\n\n## Library Dependencies\n\nThe fixed code requires the `crypto` module, which is a built-in module in Node.js. No additional library dependencies are required.\n\n## OWASP Resources\n\n- [OWASP Top 10 2017: A3-Sensitive Data Exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)\n- [OWASP Cheat Sheet: Password Storage](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-1091216b-49c5-4ad2-be16-e7ac0639e30d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\" vulnerability refers to a situation where an attacker can manipulate user-input controlled parameters to inject malicious scripts. In the provided code snippet, the `replace` function is used to remove newline characters from the `time` variable. If the `time` variable is controlled by user input, it could be manipulated to include malicious scripts, leading to a Cross-Site Scripting (XSS) attack.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate, sanitize, and escape user inputs. Never trust user inputs blindly. Use built-in functions or libraries to sanitize and escape user inputs. Also, use Content Security Policy (CSP) to prevent the execution of inline scripts.\n\n## Source Code Fix Recommendation\n\n```javascript\n// Assuming you have a function to sanitize user inputs\nfunction sanitizeInput(input) {\n    // Implement your sanitization logic here\n    // This is just a placeholder\n    return input.replace(/<[^>]*>?/gm, '');\n}\n\n// Use the sanitizeInput function before using the user input\ntime = sanitizeInput(time);\ntime = time.replace(/\\n$/, '');\n```\n\n## Library Dependencies\n\nThe provided code snippet does not require any library dependencies to execute properly.\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-65205ac7-4e82-4401-943e-df4ca45e9d2f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"JavaScript Sink Vulnerability due to User-Input Controlled Parameter Passing Detected\" vulnerability refers to a situation where an application uses untrusted data in a JavaScript function call without proper validation or escaping. This can lead to various security issues such as Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users, or even Remote Code Execution (RCE), where an attacker can execute arbitrary code on the server.\n\nIn the provided code snippet, the `todo.content` is directly converted to a base64 string and sent as a response. If `todo.content` is user-controlled and not properly sanitized, it can lead to potential security risks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always validate and sanitize user inputs. Never trust data received from the user. Use a secure method to handle user inputs, such as using a safe API, which avoids the use of the interpreter entirely or provides a parameterized interface.\n\n## Source Code Fix Recommendation\n\n```javascript\n// Assuming express and body-parser are used\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.post('/todo', (req, res) => {\n  let content = req.body.content;\n  \n  // sanitize the content\n  content = content.replace(/[^a-zA-Z0-9 ]/g, \"\");\n\n  res.status(302).send(Buffer.from(content).toString('base64'));\n});\n```\n\nIn the above code, we sanitize the `content` by removing all non-alphanumeric characters. This is a simple example and real-world applications may require more complex sanitization processes.\n\n## Library Dependencies\n\n- express\n- body-parser\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-af0fe598-96e5-478c-8978-25e76aa17556",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when data enters a web application through an untrusted source, most frequently a web request, and is used to generate dynamic HTML content. The vulnerability is present when the application does not adequately validate input before returning it to the client's browser. In JavaScript, direct writing to the response object can lead to XSS vulnerabilities if the data written to the response is not properly sanitized.\n\nIn the provided code snippet, `res.send(messages);`, the `messages` variable is directly written to the response object. If `messages` contains untrusted data, this could lead to an XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always sanitize and escape untrusted data before writing it to the response object. This can be done using various methods, such as using a library that automatically escapes HTML special characters, or manually escaping the characters.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix using the `escape-html` library to sanitize the `messages` variable:\n\n```javascript\nvar escape = require('escape-html');\nres.send(escape(messages));\n```\n\n## Library Dependencies\n\nThe `escape-html` library is required for the code example to execute properly.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-a036c850-3629-49ac-ac3d-33436505dabd",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability \"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\" refers to a situation where an attacker can manipulate the parameters passed to a function or method in JavaScript, potentially leading to harmful consequences such as Cross-Site Scripting (XSS) attacks, SQL Injection, or Remote Code Execution.\n\nIn the provided code snippet, there doesn't seem to be a direct vulnerability as no user input is being directly used. However, if the status code `403` or the error message `'Access denied'` were to be controlled by user input, it could potentially lead to a vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this type of vulnerability, it is recommended to:\n\n1. Always validate, sanitize, and escape user input: Never trust user input and always treat it as potentially malicious. Use built-in functions or trusted libraries to sanitize and escape user input.\n\n2. Use parameterized queries or prepared statements: This can help prevent SQL Injection attacks.\n\n3. Implement proper error handling: Do not reveal sensitive information in error messages.\n\n4. Use Content Security Policy (CSP): This can help prevent XSS attacks.\n\n## Source Code Fix Recommendation\n\nAssuming the status code and error message are controlled by user input, a fix could look like this:\n\n```javascript\nlet statusCode = getUserInput1();\nlet errorMessage = getUserInput2();\n\nif (typeof statusCode !== 'number' || statusCode < 100 || statusCode > 599) {\n    throw new Error('Invalid status code');\n}\n\nif (typeof errorMessage !== 'string' || errorMessage.length > 200) {\n    throw new Error('Invalid error message');\n}\n\nres.status(statusCode).send({ ok: false, error: errorMessage });\n```\n\nIn this fix, we validate the user input before using it. If the input is not valid, we throw an error.\n\n## Library Dependencies\n\nThe provided code snippet seems to be using the Express.js library. Therefore, the following dependency is required:\n\n- Express.js\n\n## OWASP Resources\n\n- [OWASP Top 10 2017: Injection](https://owasp.org/www-project-top-ten/2017/A1_2017-Injection)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-290ede4f-f5ac-44b5-86ae-7db06be0b57a",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability \"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\" refers to a situation where an attacker can manipulate the parameters passed to a function or method in JavaScript, potentially leading to harmful consequences such as Cross-Site Scripting (XSS) attacks, SQL Injection, or Remote Code Execution.\n\nIn the provided code snippet, there doesn't seem to be a direct vulnerability as no user input is being directly used. However, if the status code `403` or the error message `'Access denied'` were to be controlled by user input, it could potentially lead to a vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this type of vulnerability, it is recommended to:\n\n1. Always validate, sanitize, and escape user input: Never trust user input and always treat it as potentially malicious. Use built-in functions or trusted libraries to sanitize and escape user input.\n\n2. Use parameterized queries or prepared statements: This can help prevent SQL Injection attacks.\n\n3. Implement proper error handling: Do not reveal sensitive information in error messages.\n\n4. Use Content Security Policy (CSP): This can help prevent XSS attacks.\n\n## Source Code Fix Recommendation\n\nAssuming the status code and error message are controlled by user input, a fix could look like this:\n\n```javascript\nlet statusCode = getUserInput1();\nlet errorMessage = getUserInput2();\n\nif (typeof statusCode !== 'number' || statusCode < 100 || statusCode > 599) {\n    throw new Error('Invalid status code');\n}\n\nif (typeof errorMessage !== 'string' || errorMessage.length > 200) {\n    throw new Error('Invalid error message');\n}\n\nres.status(statusCode).send({ ok: false, error: errorMessage });\n```\n\nIn this fix, we validate the user input before using it. If the input is not valid, we throw an error.\n\n## Library Dependencies\n\nThe provided code snippet seems to be using the Express.js library. Therefore, the following dependency is required:\n\n- Express.js\n\n## OWASP Resources\n\n- [OWASP Top 10 2017: Injection](https://owasp.org/www-project-top-ten/2017/A1_2017-Injection)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.dom-xss-finder"
                ]
              }
            },
            {
              "id": "glog-9f13e523-57ac-4083-8804-27087ff774ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-cfd5bc1b-cbb6-459a-88c4-5e0dd565b038",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-fd15f06e-2b07-48cb-bbfd-e04edea67635",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nEJS (Embedded JavaScript) templates are a popular templating engine in JavaScript. However, if not used properly, they can lead to Cross-Site Scripting (XSS) vulnerabilities. In the provided code snippet, the `redirectPage` variable is not being escaped, which means that if it contains malicious script, it will be executed.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always escape external data before including it in your HTML. This can be done using the `<%= %>` syntax in EJS, which automatically escapes the output.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the code:\n\n```html\n<input type=\"hidden\" name=\"redirectPage\" value=\"<%= redirectPage %>\" />\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-3aac506a-487d-461e-8c5b-84f051790784",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographically secure random numbers. This is because it is a pseudorandom number generator, which means it uses an algorithm to generate a sequence of numbers that only approximates the properties of random numbers. The sequence of numbers generated by `Math.random()` can be predicted if the initial seed used by the algorithm is known. This makes it unsuitable for tasks that require a high level of security, such as generating random keys or tokens in a cryptographic context.\n\nThe `crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographically secure random numbers. This function generates pseudorandom bytes, but it does not guarantee that the bytes are unpredictable or evenly distributed, which are important properties for cryptographic security.\n\n## Mitigation Advice\n\nTo generate cryptographically secure random numbers in JavaScript, you can use the `crypto.randomBytes()` function in Node.js or the `window.crypto.getRandomValues()` function in a browser context. These functions generate random numbers that are suitable for cryptographic use.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the code using `crypto.randomBytes()`:\n\n```javascript\nconst crypto = require('crypto');\n\nfunction secureRandom(min, max) {\n    var range = max - min;\n    var randomBuffer = crypto.randomBytes(4);\n    var randomValue = randomBuffer.readUInt32BE(0, true);\n    return min + (randomValue % range);\n}\n\nreturn secureRandom(min, max);\n```\n\n## Library Dependencies\n\nThe code example requires the `crypto` module, which is a built-in module in Node.js.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-d00a7524-5337-494b-8bb0-6ea9edf8b847",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn JavaScript, Mustache is a popular templating system that is often used to generate HTML. However, if user input is not properly escaped, it can lead to Cross-Site Scripting (XSS) vulnerabilities. This happens when the triple mustache `{{{ }}}` is used in Mustache templates, which tells Mustache to render the data unescaped. This means that if the data contains any HTML or JavaScript, it will be executed by the browser, potentially leading to an XSS attack.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape user input that is included in a Mustache template. This can be done by using the double mustache `{{ }}` instead of the triple mustache. The double mustache tells Mustache to escape any HTML or JavaScript in the data, preventing it from being executed by the browser.\n\n## Source Code Fix Recommendation\n\nReplace:\n\n```javascript\n{{{body}}}\n```\n\nwith:\n\n```javascript\n{{body}}\n```\n\n## Library Dependencies\n\nThe code example requires the following library:\n\n- Mustache.js\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-39ed3dd0-ea6a-40b1-92a6-b4628a90217a",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. EJS (Embedded JavaScript) is a simple templating language that lets you generate HTML markup with plain JavaScript. However, if user-supplied data is not properly sanitized before being used in an EJS template, it can lead to Cross-Site Scripting (XSS) attacks. In XSS attacks, an attacker can inject malicious scripts into web pages viewed by other users, which can lead to a variety of attacks such as stealing user data, defacing web sites, or performing actions on behalf of the user.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape user-supplied data before using it in an EJS template. This can be done using the `<%= %>` syntax in EJS, which automatically escapes HTML characters.\n\n## Source Code Fix Recommendation\n\nReplace `<%- body %>` with `<%= body %>`. The `<%= %>` syntax automatically escapes HTML characters, preventing XSS attacks.\n\n## Library Dependencies\n\nThe code example requires the `ejs` library to execute properly.\n\n## OWASP and CWE Links\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-476df468-e692-45b9-a2d4-1877432e849b",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe EJS Template XSS Vulnerability is a type of Cross-Site Scripting (XSS) vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This vulnerability can allow attackers to execute malicious scripts in the victim's browser which can lead to a variety of attacks such as stealing user sessions, defacing web sites, or redirecting the user to malicious sites.\n\nIn the provided code snippet, the vulnerability arises from the use of unescaped external data (`todo.content`) in the EJS template. This can potentially allow an attacker to inject malicious scripts through `todo.content`.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. In addition, use secure coding practices such as input validation, least privilege, and secure defaults.\n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, you can mitigate the vulnerability by escaping the `todo.content` using the `<%- %>` syntax in EJS which outputs the value of the variable and escapes any HTML:\n\n```html\n<a class=\"update-link\" href=\"/edit/<%= todo._id %>\" title=\"Update this todo item\"><%- todo.content %></a>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Express.js: A web application framework for Node.js.\n- EJS: A simple templating language that lets you generate HTML markup with plain JavaScript.\n- Marked: A markdown parser and compiler built for speed.\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-bff0f977-e3aa-4843-b756-54b9b7499205",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Generic Secret Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 14,
                  "endLine": 83,
                  "endColumn": 67,
                  "snippet": {
                    "text": "var token = 'SECRET_TOKEN_f8ed84e8f41e4146403dd4a6bbcea5e418d23a9';"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "39c09400d1093cda9964160c303d84700d160c268ad56944ecdfed90526b847f154d5b66f58dc96a7fef5a0a2313f74ca7188929e704c5f30865c49bdf86cffa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-a2af60da-7a80-410e-8ace-b121ace6f7e7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Generic Secret Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "example111.json",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 717,
                  "endLine": 80,
                  "endColumn": 1529,
                  "snippet": {
                    "text": "                \"markdown\": \"* Package Manager: npm\\n* Vulnerable module: bl\\n* Introduced through: goof@1.0.1, mongodb@3.5.9 and others\\n### Detailed paths\\n* _Introduced through_: goof@1.0.1 › mongodb@3.5.9 › bl@2.2.0\\n# Overview\\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\\n\\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\\r\\n\\r\\n## PoC by chalker\\r\\n```\\r\\nconst { BufferList } = require('bl')\\r\\nconst secret = require('crypto').randomBytes(256)\\r\\nfor (let i = 0; i < 1e6; i++) {\\r\\n  const clone = Buffer.from(secret)\\r\\n  const bl = new BufferList()\\r\\n  bl.append(Buffer.from('a'))\\r\\n  bl.consume(-1024)\\r\\n  const buf = bl.slice(1)\\r\\n  if (buf.indexOf(clone) !== -1) {\\r\\n    console.error(`Match (at ${i})`, buf)\\r\\n  }\\r\\n}\\r\\n```\\n# Remediation\\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\\n# References\\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\\n- [HackerOne Report](https://hackerone.com/reports/966347)\\n\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fbf5ed662d722ce658a51e2c115c8a58bb78d67730df6b1f3ddf6d55b89f4ea8304c47c1ad9ad9be5cb95e2d20fc24a47fbf621c548c0d04069fe2e75a628a34_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-86571f38-63ff-44ba-968c-6c2c1abab408",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability Detected in JavaScript Template String Interpolation\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "example111.json",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 746,
                  "endLine": 260,
                  "endColumn": 1368,
                  "snippet": {
                    "text": "                \"markdown\": \"* Package Manager: npm\\n* Vulnerable module: handlebars\\n* Introduced through: goof@1.0.1, tap@11.1.5 and others\\n### Detailed paths\\n* _Introduced through_: goof@1.0.1 › tap@11.1.5 › nyc@11.9.0 › istanbul-reports@1.4.0 › handlebars@4.0.11\\n# Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\\r\\n\\r\\n## POC\\r\\n```\\r\\n<script src=\\\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\\\"></script> \\r\\n<script> \\r\\n// compile the template \\r\\nvar s = ` \\r\\n{{#with (__lookupGetter__ \\\"__proto__\\\")}} \\r\\n{{#with (./constructor.getOwnPropertyDescriptor . \\\"valueOf\\\")}} \\r\\n{{#with ../constructor.prototype}} \\r\\n{{../../constructor.defineProperty . \\\"hasOwnProperty\\\" ..}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{#with \\\"constructor\\\"}} \\r\\n{{#with split}} \\r\\n{{pop (push \\\"alert('Vulnerable Handlebars JS when compiling in strict mode');\\\")}} \\r\\n{{#with .}} \\r\\n{{#with (concat (lookup join (slice 0 1)))}} \\r\\n{{#each (slice 2 3)}} \\r\\n{{#with (apply 0 ../..)}} \\r\\n{{.}} \\r\\n{{/with}} \\r\\n{{/each}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n`;\\r\\nvar template = Handlebars.compile(s, { \\r\\nstrict: true \\r\\n}); \\r\\n// execute the compiled template and print the output to the console console.log(template({})); \\r\\n</script>\\r\\n```\\n# Remediation\\nUpgrade `handlebars` to version 4.7.7 or higher.\\n# References\\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8)\\n\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "86e43c626563023587a8cfefdb6e45d62abbfea33f2549b5ddb8f808ce191be315bc2438f9da237ee35216f3ccbc969dcb8d5a40645621da14cc295322320f16_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-4d250cf6-a086-4860-8ca9-9ff7584442d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability from User-Controlled Data in HTML String\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "endLine": 58,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  console.log(`User logged in: ${username}`)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ce261fceaa65dd184dd6141671983f39db70315772ddcd6506c5cb038ee93be63c2f20e1286ebe30f572f15210077db10f5ba765b3ea26050ffd22d1951a870_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-aab1adac-584c-48da-89f0-f02bd77f802e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Potential Root User Exploitation in Docker Container"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 28,
                  "snippet": {
                    "text": "ENTRYPOINT [\"npm\", \"start\"]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03e569d33136470730d1bb7c2aadebfd578f57db0251b5c961e4bb6f74a7b06915605c7bb0f8c4c06c623b529e84fd4a3b1b42ab4ae1d765428edc6569b48a42_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-265be8fa-509b-47ad-9c7d-93bd1dd0e60a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Cryptographic Weakness in crypto.pseudoRandomBytes()/Math.random() Random Number Generator\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 30,
                  "endLine": 317,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  { name: 'admin', password: Math.random().toString(32), canDelete: true },"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bae4b8f215bac7edb4be16b2fd17c9727b7af5dfd12e750273bec10c6cb5b1785492912422a96f5e52a9d2efab752852a10910e96abdb3fdbf32a6a05c650125_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-1091216b-49c5-4ad2-be16-e7ac0639e30d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 12,
                  "endLine": 137,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    time = time.replace(/\\n$/, '');"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "837fb74ab0ccb7ff61fe658da279f5e416474622759c679ac4a63c038fed16ec920117bc53c0f493271333a81af98632f636baab227e4e3a87c04b55fc1b581e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-65205ac7-4e82-4401-943e-df4ca45e9d2f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"JavaScript Sink Vulnerability due to User-Input Controlled Parameter Passing Detected.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 5,
                  "endLine": 184,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    res.status(302).send(todo.content.toString('base64'));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d3dca3f47eac80b6526faf3fac43866a2c2eecd1a4fd0bc6122aee52bb940dce0056db7b4801cc68a6d251dd12142a134d66c7628f66b87b4551bccaf23da9a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-af0fe598-96e5-478c-8978-25e76aa17556",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Direct Writing to Response Object May Lead to XSS Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 5,
                  "endLine": 332,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    res.send(messages);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f45503b614fbba9152325bf23b4188c8a6a894398ef958fec36aaf015b1fc887f1ddfaa8582bf72fb294ac55a949a5fbb75e8f5c3bbc8496d6a6dbbc272495d2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-a036c850-3629-49ac-ac3d-33436505dabd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 7,
                  "endLine": 338,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      res.status(403).send({ ok: false, error: 'Access denied' });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1ea3444a97c0c0eb7ac562ca4eebde88b0822a50ee3a5b0b15807c6318c42fefc5d11c6346e8d5cfac8327683163253d9fecdca26dab931361fc453e9a374a22_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-290ede4f-f5ac-44b5-86ae-7db06be0b57a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"JavaScript Sink Vulnerability Detected through User-Input Controlled Parameter Passing\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 7,
                  "endLine": 360,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      res.status(403).send({ ok: false, error: 'Access denied' });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "66b659d9ac40b2ece693c9e54593653c1a21c01ee327e2693eb3dfb63b97e5fd670df83e442fd8e68cfc90e9e91d86b9ceca6b0d87d810d614dd92a15dd9cef6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9f13e523-57ac-4083-8804-27087ff774ea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 5,
                  "endLine": 365,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    res.send({ ok: true });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2ace50695f13f0d435116b57b1162746bf090c77eaab09479ef44717f73d9c0368e57cefa4a24e90e29fa663d1bd21d43a9af0d9a0bc1fb37d23021d2b6972a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-cfd5bc1b-cbb6-459a-88c4-5e0dd565b038",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 5,
                  "endLine": 354,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    res.send({ ok: true });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5e69ac40a767d7ede9b9ae43ebc95b6e7c88a31098d08aa659aaa5bda1dec7213799a5f89cbce04d5bc7950d7d39af6329e811e7ffb5bb5f910202a6c53dbd3c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-fd15f06e-2b07-48cb-bbfd-e04edea67635",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/admin.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 55,
                  "endLine": 17,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      <input type=\"hidden\" name=\"redirectPage\" value=\"<%- redirectPage %>\" />"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "38efd22c5a07ae3951ca032dc993871c3872d2eccfee0f26f4241b9152a9c2b21c76b6c444391ea08d387c35e446494cdd150332936b8b78db8936a33b1c3826_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-3aac506a-487d-461e-8c5b-84f051790784",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 24,
                  "endLine": 4,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    return Math.floor( Math.random() * ( max - min + 1 )) + min;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3075809ce239b87b7ee404eadc9f043863190bcc8453a8dc2054ba8d52579161c749cb0eba39bb324299c8c39278a9198a868e8855a3a10b80b81d4bedc4a903_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-d00a7524-5337-494b-8bb0-6ea9edf8b847",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unescaped Input in Mustache Template Leading to XSS Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/layout.hbs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      {{{body}}}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ff9b5d5756fb4ffaba65b9392ccda1096d1fecc4bb09f26f13aa05f5472c9149847b33f9592f298dca8553c551cfae15600fbee7e34db6eefe8011d4e5fe220_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-39ed3dd0-ea6a-40b1-92a6-b4628a90217a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/layout.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      <%- body %>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a95e1ffc66e76fa5739bc59d0482027cda57a46d0bf7bfee58d0f5d3d407a68805aa4f828240ec732e343c4bfea98de3ea74e76e35ceaf8846a2908d7d9d8bb0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-476df468-e692-45b9-a2d4-1877432e849b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/index.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 87,
                  "endLine": 20,
                  "endColumn": 126,
                  "snippet": {
                    "text": "    <a class=\"update-link\" href=\"/edit/<%= todo._id %>\" title=\"Update this todo item\"><%- marked(new String(todo.content)) %></a>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8a22f8481d9683762baa2e42e9fbf984ce5becef7857927b037b7465defcc1d90085c7a666ebdd3c492cd52546948ffca0d78b067a9f8cc98747e6c8a6af6127_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}